extends: [[spectral:oas, all]]

formats: [oas3, oas3.0, oas3.1]

functionsDir: functions/

functions: []

aliases:
  DescribableObjects:
    description: "List of all objects with a mandatory description property"
    targets:
    - formats:
      - oas3
      given:
      - "$.info"
      - "$.tags[*]"
      - "$.paths[*][get,post,put,delete,patch,head,options,trace]"
      - "$.paths[*][*].responses[*]"
      - "$..parameters[?(@ && @.in)]"
      - "$.components.schemas[*]"
      - "$.components.schemas[*].properties[*]"
      - "$.servers[*]"

rules:
  # ##############################
  # Severity Change from default #
  # ##############################
  
  # Severity : Error
  info-contact: error                  # info-contact rule severity changed from warning to error
  path-keys-no-trailing-slash: error   # path-keys-no-trailing-slash rule severity changed from warning to error
  openapi-tags: error                  # openapi-tags rule severity changed from warning to error
  operation-description: error         # operation-description rule severity changed from warning to error
  operation-tag-defined: error         # operation-tag-defined rule severity changed from warning to error
  oas3-api-servers: error              # oas3-api-servers rule severity changed from warning to error
  operation-operationId: error         # operation-operationId rule severity changed from warning to error
  operation-operationId-unique: error  # operation-operationId-unique rule severity changed from warning to error
  operation-tags: error                # operation-tags rule severity changed from warning to error
  operation-success-response: error    # operation-success-response rule severity changed from warning to error
  
  # Disabled built-in rules
  openapi-tags-alphabetical: off      # openapi-tags-alphabetical rule disabled
  oas3-parameter-description: off     # oas3-parameter-description rule disabled
  tag-description: off                # tag-description rule disabled
  info-license: off                   # info-license rule disabled
  license-url: off                    # license-url rule disabled
  info-description: off               # info-description rule disabled

  # #############
  # Info Rules  #
  # #############

  # Contact object is only bound to have a name as a required field
  contact-properties:
    description: Contact object must have at least a "name" as a required field.
    message: "{{description}}"
    severity: error
    given: "$"
    then:
      field: info.contact.name
      function: truthy

  # ############# #
  # Servers Rules #
  # ############# #

  # Ensure only major versions in servers urls
  ensure-only-major-api-versions:
    description: "Using semver-like versions for an API are almost never necessary, because breaking changes could only happen on a major version, and non-breaking changes don't matter. The entire concept is invalidated by API evolution means that a minor version can be deployed that adds new functionality, and that should not break anything. If you have a patch, getting that patched version out to clients immediately means fewer production issues, and you don't want to wait for them to redeploy the client application to use the new server URL."
    message: "Version numbers SHOULD contain major only, no minor or patch."
    severity: warn
    given: "$.servers..url"
    then:
      function: pattern
      functionOptions:
        notMatch: "/[\\.|\\/|](v|version)?[0-9]+\\.[0-9]+/i"

  # #############
  # Path Rules  #
  # #############
  
  # Enforce version not to be in path
  no-version-number-in-paths:
    description: Version numbers (like "/v1") should be in "servers", not in "paths"
    message: "{{description}}"
    severity: warn
    given: "$.paths[*]~"
    then:
      function: pattern
      functionOptions:
        notMatch: /((?:\/)(v|version)[0-9]{1,3}(?:\/)?)/i

  # Enforce all endpoints to have a summary
  operation-summary:
    description: Operation "summary" must be present and non-empty string.
    message: "{{description}}"
    severity: error
    given: "$.paths[*][get,post,put,delete,patch,head,options,trace]"
    then:
      field: summary
      function: truthy

  # Ensure GET endpoints have no request body
  ensure-GET-no-request-body:
    description: A `GET` request MUST NOT accept a request body.
    message: "{{description}}"
    severity: warn
    given: $.paths..get.requestBody
    then:
      function: undefined
  
  # Ensure DELETE endpoints have no request body
  ensure-DELETE-no-request-body:
    description: A `DELETE` request MUST NOT accept a request body.
    message: "{{description}}"
    severity: warn
    given: $.paths..delete.requestBody
    then:
      function: undefined

  # Ensure NO CRUD function names in URIs
  ensure-no-crud-in-uri-names:
    description: SHOULD NOT use CRUD function names in URIs
    message: "{{description}}"
    severity: warn
    given: "$.paths[*]~"
    then:
      function: pattern
      functionOptions:
        notMatch: ^\/(get|put|post|patch|options|head|trace|delete).*

  # Ensure NO CRUD function names in URIs
  ensure-no-crud-in-operation-id:
    description: SHOULD NOT use CRUD function names in operation ids
    message: "{{description}}"
    severity: warn
    given: "$..*.operationId"
    then:
      function: pattern
      functionOptions:
        notMatch: \b(get|put|post|patch|options|head|trace|delete)\b

  # ###############
  # Casing Rules  #
  # ###############

  # Paths should be camelCase
  paths-must-be-camelcase:
    description: Paths should be in camelCase with no digits allowed.
    message: "'{{property}}' path should be in camelCase with no digits allowed."
    severity: warn
    given: "$.paths[*]~"
    then:
      function: pattern
      functionOptions:
        match: "^\/{?[a-z][a-zA-Z]+}?(?:\/{[a-z][a-zA-Z]+})*(?:\/[a-z][a-zA-Z]+(?:\/{[a-z][a-zA-Z]+})*)*\/?$"

  # Enforce camelCase for all query parameters keys
  ensure-query-param-keys-camelcase:
    description: All query parameter keys should be camelCase.
    message: "'{{property}}' query parameter key should be in camelCase."
    severity: warn
    given: "$.components.parameters.[?(@.in == 'query')]~"
    then:
      function: pattern
      functionOptions:
        match: "^[a-z0-9]+(?:[A-Z][a-z0-9]+)*$"

  # Enforce camelCase for all path parameters keys
  ensure-path-param-keys-camelcase:
    description: All path parameter keys should be camelCase.
    message: "'{{property}}' path parameter key should be in camelCase."
    severity: warn
    given: "$.components.parameters.[?(@.in == 'path')]~"
    then:
      function: pattern
      functionOptions:
        match: "^[a-z0-9]+(?:[A-Z][a-z0-9]+)*$"

  # Enforce camelCase for all schema keys
  ensure-schema-keys-camelcase:
    description: All schema keys should be camelCase.
    message: "'{{property}}' schema key should be in camelCase."
    severity: warn
    given: "$.components['schemas'].*~"
    then:
      function: pattern
      functionOptions:
        match: "^[a-z0-9]+(?:[A-Z][a-z0-9]+)*$"

  # Enforce cameCase for all parameters name values
  ensure-parameter-name-value-camelcase:
    description: All parameter name values should be camelCase.
    message: "'{{property}}' parameter name value should be in camelCase."
    severity: warn
    given: "$.components.parameters[*].name"
    then:
      function: pattern
      functionOptions:
        match: "^[a-z0-9]+(?:[A-Z][a-z0-9]+)*$"

  # Enforce operaionId to be camelCase
  operation-id-camelcase:
    description: OperationId must be camelCase.
    given: $..*.operationId
    severity: warn
    recommended: true
    message: "OperationId '{{value}}' must be camelCase."
    then:
      function: pattern
      functionOptions:
        match: "^[a-z0-9]+(?:[A-Z][a-z0-9]+)*$"

  # ###########################
  # API Best Practices Rules  #
  # ###########################

  # Ensure descriptions are provided for all describable objects
  ensure-description-non-empty-string:
    description: "Descriptions should be present and non-empty strings."
    recommended: true
    severity: error
    given:
    - "#DescribableObjects"
    then:
    - function: truthy
      field: description
    message: "{{description}}"

  ensure-description-length:
    description: "Descriptions should be a minimum of 20 characters."
    recommended: true
    severity: error
    given:
    - "#DescribableObjects"
    then:
    - function: length
      functionOptions:
        min: 20
      field: description
    message: "{{description}}"

  ensure-description-end-with-period:
    description: "Descriptions should end with a period."
    recommended: true
    severity: error
    given:
    - "#DescribableObjects"
    then:
    - function: pattern
      functionOptions:
        match: "\\.$"
      field: description
    message: "{{description}}"
  
  ensure-description-start-uppercase:
    description: "Descriptions should start with a capital letter."
    recommended: true
    severity: error
    given:
    - "#DescribableObjects"
    then:
    - function: pattern
      functionOptions:
        match: "/^[A-Z]/"
      field: description
    message: "{{description}}"
  
  # Ensure a short summary for all endpoints    
  operation-short-summary:
    description:
      Operation summary should be short and sweet, no full stops, and less than
      30 characters.
    severity: error
    recommended: true
    given: $.paths[*][get,post,put,delete,patch,head,options,trace]
    then:
      - field: summary
        function: pattern
        functionOptions:
          notMatch: "\\."
      - field: summary
        function: length
        functionOptions:
          max: 30

  # Enforce all parameters to have examples
  ensure-param-examples:
    description: Parameters must have examples.
    given: $..parameters[?(@ && @.in)]
    severity: error
    recommended: true
    message: "'{{property}}' parameter example must be present and non-empty string."
    then:
      field: example
      function: truthy
  
  # Enforce all properties to have examples
  ensure-properties-example:
    description: Properties must have examples.
    given: $.components.schemas[*].properties[*]
    severity: error
    recommended: true
    message: "'{{property}}' example must be present and non-empty string."
    then:
      field: example
      function: truthy

  # ########## #
  # Data Types #
  # ########## #

  data-type-missing-integer-format:
    message: Format is not specified for an integer property type
    severity: warn
    given: "$.components.schemas..properties..[?(@.type=='integer')]"
    then:
      field: format
      function: defined

  data-type-missing-number-format:
    message: Format is not specified for a number property type
    severity: warn
    given: "$.components.schemas..properties..[?(@.type=='number')]"
    then:
      field: format
      function: defined

  data-type-incorrect-integer-format:
    message: "Incorrect integer format: {{value}}. Must be one of: int32 or int64"
    severity: warn
    given: "$..[?(@.type=='integer')]"
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
          - int32
          - int64

  data-type-incorrect-number-format:
    message: "Incorrect integer format: {{value}}. Must be one of: float or double"
    severity: warn
    given: "$..[?(@.type=='number')]"
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
          - float
          - double

  data-type-incorrect-string-format:
    message: "Incorrect string format: {{value}}."
    severity: warn
    given: "$..[?(@.type=='string')]"
    then:
      field: format
      function: enumeration
      functionOptions:
        values:
          - date-time
          - date
          - time
          - email
          - uri
          - uuid
          - base64
          - binary
          - regex
          - lang
          - country
          - currency

  # #################
  # Security Rules  #
  # #################

  # Ensure to have https protocol or localhost
  ensure-https-servers-protocol:
    description: All servers must use the https protocol except when using localhost
    message: "Servers must use the HTTPS protocol except when using localhost"
    severity: error
    recommended: true
    given: $.servers[*].url
    then:
      field: url
      function: pattern
      functionOptions:
        match: "^(http:\/\/localhost:[0-9]+|https:\/\/localhost:[0-9]+|https:\/\/.+)$"

  # Ensure to have a security object defined
  ensure-security-object:
    description: "All APIs must have a security object defined."
    message: "Security object must be defined."
    severity: info
    recommended: true
    given: $
    then:
      field: security
      function: defined

  # Ensure to have a security scheme defined
  ensure-security-scheme:
    description: "All APIs must have a security scheme defined."
    message: "Security scheme must be defined."
    severity: info
    recommended: true
    given: $.components
    then:
      field: securitySchemes
      function: truthy
